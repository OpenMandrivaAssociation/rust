diff -up rustc-1.34.1-src/src/tools/clippy/src/driver.rs.omv~ rustc-1.34.1-src/src/tools/clippy/src/driver.rs
--- rustc-1.34.1-src/src/tools/clippy/src/driver.rs.omv~	2019-05-08 22:49:29.126753637 +0200
+++ rustc-1.34.1-src/src/tools/clippy/src/driver.rs	2019-05-08 22:52:27.707912817 +0200
@@ -72,7 +72,7 @@ pub fn main() {
                 exit(0);
             }
 
-            let mut orig_args: Vec<String> = env::args().collect();
+            let mut args: Vec<String> = env::args().collect();
 
             // Get the sysroot, looking from most specific to this invocation to the least:
             // - command line
@@ -81,56 +81,24 @@ pub fn main() {
             //    - RUSTUP_HOME, MULTIRUST_HOME, RUSTUP_TOOLCHAIN, MULTIRUST_TOOLCHAIN
             // - sysroot from rustc in the path
             // - compile-time environment
-            let sys_root_arg = arg_value(&orig_args, "--sysroot", |_| true);
+            let sys_root_arg = arg_value(&args, "--sysroot", |_| true);
             let have_sys_root_arg = sys_root_arg.is_some();
-            let sys_root = sys_root_arg
-                .map(std::string::ToString::to_string)
-                .or_else(|| std::env::var("SYSROOT").ok())
-                .or_else(|| {
-                    let home = option_env!("RUSTUP_HOME").or(option_env!("MULTIRUST_HOME"));
-                    let toolchain = option_env!("RUSTUP_TOOLCHAIN").or(option_env!("MULTIRUST_TOOLCHAIN"));
-                    home.and_then(|home| toolchain.map(|toolchain| format!("{}/toolchains/{}", home, toolchain)))
-                })
-                .or_else(|| {
-                    Command::new("rustc")
-                        .arg("--print")
-                        .arg("sysroot")
-                        .output()
-                        .ok()
-                        .and_then(|out| String::from_utf8(out.stdout).ok())
-                        .map(|s| s.trim().to_owned())
-                })
-                .or_else(|| option_env!("SYSROOT").map(String::from))
-                .expect("need to specify SYSROOT env var during clippy compilation, or use rustup or multirust");
 
             // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.
             // We're invoking the compiler programmatically, so we ignore this/
-            if orig_args.len() <= 1 {
+            if args.len() <= 1 {
                 std::process::exit(1);
             }
-            if Path::new(&orig_args[1]).file_stem() == Some("rustc".as_ref()) {
+            if Path::new(&args[1]).file_stem() == Some("rustc".as_ref()) {
                 // we still want to be able to invoke it normally though
-                orig_args.remove(1);
+                args.remove(1);
             }
-            // this conditional check for the --sysroot flag is there so users can call
-            // `clippy_driver` directly
-            // without having to pass --sysroot or anything
-            let mut args: Vec<String> = if have_sys_root_arg {
-                orig_args.clone()
-            } else {
-                orig_args
-                    .clone()
-                    .into_iter()
-                    .chain(Some("--sysroot".to_owned()))
-                    .chain(Some(sys_root))
-                    .collect()
-            };
 
             // this check ensures that dependencies are built but not linted and the final
             // crate is
             // linted but not built
             let clippy_enabled = env::var("CLIPPY_TESTS").ok().map_or(false, |val| val == "true")
-                || arg_value(&orig_args, "--emit", |val| val.split(',').any(|e| e == "metadata")).is_some();
+                || arg_value(&args, "--emit", |val| val.split(',').any(|e| e == "metadata")).is_some();
 
             if clippy_enabled {
                 args.extend_from_slice(&["--cfg".to_owned(), r#"feature="cargo-clippy""#.to_owned()]);
